"use client";

import { useState } from "react";
import Link from "next/link";
import FormInput from "../ui/FormInput";
import Button from "../ui/Button";
import { useForm } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import axios from "axios";

// Define validation schema with Yup
const loginSchema = yup.object({
  username: yup.string().required("Username is required"),
  password: yup.string().required("Password is required"),
});

type LoginFormValues = yup.InferType<typeof loginSchema>;

export default function LoginForm() {
  // State to track error messages
  const [error, setError] = useState<string | null>(null);

  // Setup react-hook-form with yup validation
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<LoginFormValues>({
    resolver: yupResolver(loginSchema),
  });
  
  // Handle form submission
  const onLogin = async (values: LoginFormValues) => {
    setError(null);
    try {
      // Make API call to login endpoint using axios
      // This sends the username and password to our backend API
      const response = await axios.post("/api/auth/login", values);
      
      // Process successful response
      if (response.data.success) {
        console.log("Login successful:", response.data.user);
        
        // Store user data in localStorage or state management solution
        localStorage.setItem('user', JSON.stringify(response.data.user));
        
        // The JWT token is stored in HTTP-only cookie by the API
        // So we don't need to handle it here in the client code
        
        // Optional: Reset form after successful submission
        reset();
        
        // Redirect to home page after successful login
        window.location.href = "/";
      } else {
        // This branch should rarely execute as errors typically trigger the catch block
        setError(response.data.error || "Login failed");
      }
    } catch (err) {
      console.error("Login error:", err);

      // Detailed error handling with axios
      if (axios.isAxiosError(err)) {
        if (err.response) {
          // The request was made and the server responded with a status code
          // outside the 2xx range
          const statusCode = err.response?.status;
          const errorMessage = err.response?.data?.error;

          if (statusCode === 401) {
            setError(errorMessage || "Invalid username or password");
          } else if (statusCode === 404) {
            setError(errorMessage || "User not found");
          } else if (statusCode === 400) {
            setError(errorMessage || "Invalid input data");
          } else if (statusCode === 500) {
            setError("Server error. Please try again later.");
          } else {
            setError(errorMessage || "Login failed");
          }
        } else if (err.request) {
          // The request was made but no response was received
          setError("Network error. Please check your connection.");
        } else {
          // Something happened in setting up the request
          setError(err.message || "Something went wrong. Please try again.");
        }
      } else {
        setError("Something went wrong. Please try again.");
      }
    }
  };

  return (
    <>
      <form className="space-y-4" onSubmit={handleSubmit(onLogin)} noValidate>
        <FormInput
          id="username"
          label="Username"
          type="text"
          placeholder="johndoe"
          required
          {...register("username")}
          error={errors.username?.message}
        />

        <FormInput
          id="password"
          label="Password"
          type="password"
          placeholder="••••••••"
          required
          {...register("password")}
          error={errors.password?.message}
        />

        {error && (
          <div className="text-red-500 text-sm font-semibold">{error}</div>
        )}

        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? "Logging in..." : "Log In"}
        </Button>
      </form>
      <div className="text-center text-sm">
        <p className="text-gray-400">
          Don&apos;t have an account yet?{" "}
          <Link href="/signup" className="text-blue-400 hover:underline">
            Sign up
          </Link>
        </p>
      </div>
    </>
  );
}
